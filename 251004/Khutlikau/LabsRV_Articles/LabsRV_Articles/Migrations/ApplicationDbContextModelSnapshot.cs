// <auto-generated />
using System;
using LabsRV_Articles.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LabsRV_Articles.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Article", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("authorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("title")
                        .IsUnique();

                    b.ToTable("tbl_article", (string)null);
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("login")
                        .IsUnique();

                    b.ToTable("tbl_author", (string)null);
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Sticker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tbl_sticker", (string)null);
                });

            modelBuilder.Entity("LabsRV_Articles.MyApp.Models.Domain.ArticleSticker", b =>
                {
                    b.Property<int>("articleId")
                        .HasColumnType("integer");

                    b.Property<int>("stickerId")
                        .HasColumnType("integer");

                    b.HasKey("articleId", "stickerId");

                    b.HasIndex("stickerId");

                    b.HasIndex("articleId", "stickerId")
                        .IsUnique();

                    b.ToTable("tbl_article_sticker", (string)null);
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Article", b =>
                {
                    b.HasOne("LabsRV_Articles.Models.Domain.Author", "author")
                        .WithMany("articles")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("LabsRV_Articles.MyApp.Models.Domain.ArticleSticker", b =>
                {
                    b.HasOne("LabsRV_Articles.Models.Domain.Article", "article")
                        .WithMany("articleStickers")
                        .HasForeignKey("articleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabsRV_Articles.Models.Domain.Sticker", "sticker")
                        .WithMany("articleStickers")
                        .HasForeignKey("stickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("sticker");
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Article", b =>
                {
                    b.Navigation("articleStickers");
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Author", b =>
                {
                    b.Navigation("articles");
                });

            modelBuilder.Entity("LabsRV_Articles.Models.Domain.Sticker", b =>
                {
                    b.Navigation("articleStickers");
                });
#pragma warning restore 612, 618
        }
    }
}
